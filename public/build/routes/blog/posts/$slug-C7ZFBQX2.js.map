{
  "version": 3,
  "sources": ["browser-route-module:/Users/md/github-repos/remixbricks/app/routes/blog/posts/$slug.tsx?browser", "../../../../../app/routes/blog/posts/$slug.tsx"],
  "sourcesContent": ["export { default, meta } from \"/Users/md/github-repos/remixbricks/app/routes/blog/posts/$slug.tsx\";", "import { useContext } from 'react'\nimport {\n  ReactBricksContext,\n  PageViewer,\n  fetchPage,\n  cleanPage,\n} from 'react-bricks/frontend'\nimport { useLoaderData } from 'remix'\nimport type { MetaFunction } from 'remix'\n\nexport const loader = async ({ params }: { params: { slug: string } }) => {\n  try {\n    const page = await fetchPage(params.slug, process.env.API_KEY as string)\n    return { page }\n  } catch {\n    throw new Error(`Cannot find the \"${params.slug}\" post.`)\n  }\n}\n\nexport const meta: MetaFunction = ({ data }) => {\n  return {\n    title: data?.page?.meta?.title || 'Blog post',\n  }\n}\n\nexport default function Page() {\n  const { page } = useLoaderData()\n  // Clean the received content\n  // Removes unknown or not allowed bricks\n  const { pageTypes, bricks } = useContext(ReactBricksContext)\n  const pageOk = page ? cleanPage(page, pageTypes, bricks) : null\n\n  return <PageViewer page={pageOk} />\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAAA,mBAA2B;AAmBpB,IAAM,OAAqB,CAAC,EAAE,WAAW;AAnBhD;AAoBE,SAAO;AAAA,IACL,OAAO,0CAAM,SAAN,mBAAY,SAAZ,mBAAkB,UAAS;AAAA;AAAA;AAIvB,gBAAgB;AAC7B,QAAM,EAAE,SAAS;AAGjB,QAAM,EAAE,WAAW,WAAW,6BAAW;AACzC,QAAM,SAAS,OAAO,GAAU,MAAM,WAAW,UAAU;AAE3D,SAAO,oCAAC,IAAD;AAAA,IAAY,MAAM;AAAA;AAAA;",
  "names": []
}
